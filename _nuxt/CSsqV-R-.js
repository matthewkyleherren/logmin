import{as as f,c as p,at as h,U as v,i as y,o as w,au as m,w as g,a as P,d as S,e as O,n as _}from"./RIBstFtf.js";const F=["id","width","height"],b={__name:"RiveAsset",props:{asset:{type:Object,required:!0},width:{type:[Number,String],default:void 0},height:{type:[Number,String],default:void 0},stateMachines:{type:[Array,String],default:void 0},autoplay:{type:Boolean,default:!1},onLoad:{type:Function,default:void 0},onPlay:{type:Function,default:void 0},onPause:{type:Function,default:void 0},onStop:{type:Function,default:void 0},onLoop:{type:Function,default:void 0},onStateChange:{type:Function,default:void 0},onAdvance:{type:Function,default:void 0}},setup(a,{expose:c}){const n=a,u=f("$hUKueFFVLQ"),o=p(null),s=h(null),i=new v,r=y();return c({id:u,instance:s,canvas:o,loaded:i.promise}),w(()=>{const d=Object.fromEntries(["stateMachines","autoplay","onPlay","onPause","onStop","onLoop","onStateChange","onAdvance"].filter(e=>Object.hasOwn(n,e)&&!!n[e]).map(e=>[e,n[e]])),t=new m.Rive({src:n.asset.url,canvas:o.value,onLoad:(...e)=>{t.resizeDrawingSurfaceToCanvas(),n.onLoad&&n.onLoad(...e),i.resolve()},...d});g(r,()=>t.resizeDrawingSurfaceToCanvas()),s.value=t,P(()=>{t.cleanup(),s.value=null})}),(l,d)=>(S(),O("canvas",{id:_(u),ref_key:"canvas",ref:o,class:"_rive-asset",width:a.width,height:a.height},null,8,F))}};export{b as _};
